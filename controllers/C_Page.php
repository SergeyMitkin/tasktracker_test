<?php////Конттроллер главной страницы.////Импортируем модели и базовый контроллерinclude_once('models/m_tasks.php');include_once('models/m_auth.php');include_once('models/m_users.php');include_once('models/m_status.php');include_once('models/m_validation.php');include_once('C_Base.php');class C_Page extends C_Base{	//	// Конструктор.	//	function __construct(){				parent::__construct();	}	// главная страница	public function action_index(){	    // если администратор поставил галочку о выполнении задания        if (isset($_POST['completed']) && $_POST['completed'] == 'on'){            $completed_task = completedTask($_POST['id_task']);        }        //сортировка:        $order = 'ASC'; //порядок вывода данных        $order_icon = 'a-z↓'; // отображение вывода данных        $order_value = ''; // передаваемое через ссылку значение для сортировки        // условие, чтобы данные сортировки сохранялись для пагинации        if (isset($_GET['order']) && isset($_SESSION['sort'])        && !isset($_GET['sort'])        ){            $order_value = $_SESSION['sort'];            $order = $_GET['order'];            if ($order == 'ASC'){                $order_icon = 'a-z↓';            }else if ($order == 'DESC'){                $order_icon = 'z-a↓';            }        }        // условие, чтобы при изменнеии значения сортировки, данные выводились с a-z        if ($_SESSION['sort'] != $_GET['sort']){            unset ($_SESSION['change']);        }        // условие для изменения значения сортировки        if (isset($_GET['sort']) && !isset($_GET['order'])){            $_SESSION['sort'] = $_GET['sort'];            $order_value = $_GET['sort'];            $order = getOrder();            if ($order == 'ASC'){                $order_icon = 'a-z↓';            }else if ($order == 'DESC'){                $order_icon = 'z-a↓';            }        }        // передаём изображение вывода данных в ссылку, по которой производится сортировка        $$order_value = $order_icon;        //пагинация:        $tasksCount = getTasksCount(); // получаем количесвто задач        $results_per_page = 3; // количество задач на странице        //получаем количество страниц с задачами        $count_pages = (intdiv($tasksCount, $results_per_page));        $count_pages_total = ($tasksCount % $results_per_page ? $count_pages + 1 : $count_pages);        //получаем текущую страницу        if (!isset($_GET['page'])){            $page = 1;        }else{            $page = $_GET['page'];        }        // определяем переменные для шаблона        $this->title .= ':: Главная';// заголовок        $statusData = getStatusData();// данные таблицы status	    $usersData = getUsersData();// данные таблицы users        $tasks = getTasks($results_per_page, $order ); // массив с задачами        // помещаем переменные в шаблон		$this->content = $this->Template('views/v_index.php', array(		    'page' => $page,            'results_per_page' => $results_per_page,		    'tasksCount' => $tasksCount,		    'count_pages' => $count_pages_total,            'statusData' => $statusData,            'usersData' => $usersData,		    'tasks' => $tasks,            "$order_value" => $$order_value,            'order' => $order,            ));	}	// страница для создания задачи    public function action_create(){            $this->title .= '::Создайте задачу';            $usersData = getUsersData();        if($this->isPost()){            $task_id = $_POST['id_task'];            $task_description = clean($_POST['description']);            $email = $_POST['email'];            //валидация для email            if (filter_var($email, FILTER_VALIDATE_EMAIL)) {                $response = setTask($task_id, $task_description, $email);            }else{                $response = 'email указан неверно!';            }        }        $this->content = $this->Template('views/v_task.php',            array(                'usersData' => $usersData,                'response' => $response,                ));    }    // страница для редактирования задачи администратором    public function action_edit(){        $this->title .= '::Редактирование';        // данные задачи        $task_data = getTask($_GET['id_task']);        $task_id = $task_data['0']['id'];        $task_description = $task_data['0']['description'];        // данные пользователя        $id_user = $task_data['0']['id_user'];        $user_data = getUser($id_user);        $user_name = $user_data['0']['name'];        $user_email = $user_data['0']['email'];        if($this->isPost())        {            $task_id = $_POST['id_task'];            $task_description = clean($_POST['description']);            $response = setTask($task_id, $task_description);            header('location: index.php');            exit();        }        $this->content = $this->Template('views/v_edit.php', array(                'task_id' => $task_id,                'user_name' => $user_name,                'user_email' => $user_email,                'task_description' => $task_description,        ));    }    // страница авторизации    public function action_auth()    {        if ($_SERVER['REQUEST_METHOD'] == 'POST'){            if(!authWithCredentials()){                $autherror = 'Неправильный логин/пароль';                unset($_SESSION["user"]);                session_destroy();            }            else{                header("Location: /");            }        }        $this->content = $this->Template('views/v_auth.php',            array('autherror' => $autherror));    }    public function action_logout(){        unset($_SESSION["user"]);        session_destroy();        header("Location: /");    }}