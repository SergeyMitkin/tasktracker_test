<?phprequire_once('db.php');/** * Модель таблицы tasks */// получаем массив задач с условиями пагинации и сортировкиfunction getTasks($results_per_page, $order, $order_value){    //первая задача на странице    $first_result = 0;    if (isset($_GET['first_result'])){        $first_result = $_GET['first_result'];    }    // задаём параметр сортировки    $sort_sql = 'tasks.created_at';        if ($order_value == 'user_name') {            $sort_sql = 'users.`name`';        } else if ($order_value == 'email') {            $sort_sql = 'users.email';        } else if ($order_value == 'status') {            $sort_sql = 'status_name';        }    try {        $q = "SELECT tasks.task_id, tasks.task_name, tasks.created_at, tasks.dead_line,            users.user_name, users.email, description, id_status, status_name              FROM tasks            LEFT JOIN users ON tasks.id_user = users.user_id			LEFT JOIN `status` ON tasks.id_status = `status`.status_id              ORDER BY " . $sort_sql . " " . $order . "            LIMIT " . $first_result . "," . $results_per_page;        $sql = SQL::getInstance()->Select($q);    } catch (PDOException $e) {        die("Error: " . $e->getMessage());    }    return $sql;}// получаем данные задачи по idfunction getTask($id_task){    $id_task = (int)$id_task;    try {        $q = "SELECT * FROM tasks        LEFT JOIN users ON tasks.id_user = users.user_id         LEFT JOIN `status` ON tasks.id_status = `status`.status_id        WHERE task_id = ".$id_task;        $sql = SQL::getInstance()->Select($q);    }    catch(PDOException $e){        die("Error: ".$e->getMessage());    }    return $sql;}// получаем количество задач для пагинацииfunction getTasksCount(){        try {            $q = "SELECT COUNT(*) FROM tasks";            $sql = SQL::getInstance()->Select($q);        } catch (PDOException $e) {            die("Error: " . $e->getMessage());        }        return $sql['0']['0'];}// добавляем задачуfunction setTask($id_task = 0,$task_name, $task_description, $id_user, $dead_line){    $response = '';    $id_task = (int)$id_task;    $id_status = 2;    $date_now = date("Y-m-d G:i:s");    try {        $description = $task_description;        $t = 'tasks';        $v = array(            'task_name' => $task_name,            'description' => $description,            'id_user' => $id_user,            'id_status' => $id_status,            'created_at' => $date_now,            'dead_line' => $dead_line        );        if($id_task > 0) {            // значит текст задачи редактируется            $v = array(                'task_name' => $task_name,                'description' => $description            );            $w = "task_id =" . $id_task;            $sql = SQL::getInstance()->Update($t, $v, $w);            $response = 'Задача отредактирована';        }        else{            $sql = SQL::getInstance()->Insert($t, $v);            $response = 'Задача добавлена';        }    }    catch(PDOException $e){        die("Error: ".$e->getMessage());    }    return $response;}function deleteTask($task_id){    $response = '';    $task_id = (int)$task_id;    try{        $table = 'tasks';        $where = "task_id = " . $task_id;        $sql = SQL::getInstance()->Delete($table, $where);        $response = 'Задача удвлена';    }    catch(PDOException $e){        die("Error: ".$e->getMessage());    }    return $response;}// если admin поставил галочку о выполненииfunction completedTask($task_id){    $task_id = (int)$task_id;    $id_status = 1;    try {        $t = 'tasks';        $v = array('id_status' => $id_status);        $w = "task_id =" . $task_id;        $sql = SQL::getInstance()->Update($t, $v, $w);    }    catch(PDOException $e){        die("Error: ".$e->getMessage());    }    return $sql;}